import asyncio
import mysql.connector
import hashlib
from datetime import datetime
from typing import Any, Dict

import pytz
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command, Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder

confirmation_id = -1001940203308  # –¢–£–¢_–Ü–î_–ß–ê–¢–£_–í_–Ø–ö–ò–ô_–¢–†–ï–ë–ê_–ü–ï–†–ï–°–ò–õ–ê–¢–ò_–ó_–ö–ù–û–ü–ö–û–Æ_–ü–Ü–î–¢–í–ï–†–î–ò–¢–ò
send_to_id = -1001911886415  # –¢–£–¢_–Ü–î_–ì–†–£–ü–ò_–ö–£–î–ò_–ú–ê–Ñ_–ù–ê–î–°–ò–õ–ê–¢–ò–°–Ø_–í–ñ–ï_–ü–û–ì–û–î–ñ–ï–ù–ï

base = mysql.connector.connect(
    host="localhost",
    user="root",
    password="Qwerty12345",
    port="3320",
    database="tickets_money"
)

# print(mydb)
cursor = base.cursor()
cursor.execute(
    "CREATE TABLE IF NOT EXISTS money (""id INT AUTO_INCREMENT PRIMARY KEY, "
                                        "direction VARCHAR(255), "
                                        "sum INT UNSIGNED, currency "
                                        "VARCHAR(255), "
                                        "method VARCHAR(255), "
                                        "city VARCHAR(255), "
                                        "info VARCHAR(255), "
                                        "recipient VARCHAR(255), "
                                        "date DATE )")

router = Router()

BOT_TOKEN = "5992895337:AAGs4f43YVZRftOf_Aa75nzATebQRN6uUQg"
bot = Bot(BOT_TOKEN, parse_mode="HTML")


class Form(StatesGroup):
    direction = State()
    sum = State()
    currency = State()
    info = State()
    method = State()
    city = State()
    recipient = State()


@router.message(Command("start"))
async def command_start_handler(message: Message) -> None:
    kb = [
        [
            types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É ü§ù"),
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    await message.answer(f"–ü—Ä–∏–≤—ñ—Ç, <b>{message.from_user.full_name}!</b>", reply_markup=keyboard)


@router.message(Text("–î–æ–±–∞–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É ü§ù"))
async def send_random_value(message: Message, state: FSMContext):
    await state.set_state(Form.direction)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –Ω–∞–ø—Ä—è–º–∫—É")


@router.message(Form.direction)
async def direction(message: Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(direction=message.text)
        await state.set_state(Form.sum)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É")
    else:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ, –∞ –Ω–µ –±—É–∫–≤—É/–±—É–∫–≤–∏")


@router.message(Form.sum)
async def direction(message: Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(sum=message.text)
        await state.set_state(Form.currency)
        await message.answer(
            f"–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text="–î–æ–ª–∞—Ä"),
                        KeyboardButton(text="–Ñ–≤—Ä–æ"),
                        KeyboardButton(text="–ì—Ä–∏–≤–Ω—è")
                    ]
                ],
                resize_keyboard=True,
            ),
        )
    else:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ, –∞ –Ω–µ –±—É–∫–≤—É/–±—É–∫–≤–∏")


@router.message(Form.currency)
async def direction(message: Message, state: FSMContext):
    if message.text == "–î–æ–ª–∞—Ä" or message.text == "–Ñ–≤—Ä–æ" or message.text == "–ì—Ä–∏–≤–Ω—è":
        await state.update_data(currency=message.text)
        await state.set_state(Form.info)
        await message.answer(f"–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer(f"–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É")


@router.message(Form.info)
async def direction(message: Message, state: FSMContext):
    await state.update_data(info=message.text)
    await state.set_state(Form.method)
    await message.answer(
        f"–í–∏–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="–ì–æ—Ç—ñ–≤–∫–∞"),
                    KeyboardButton(text="–ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫")
                ]
            ],
            resize_keyboard=True,
        ),
    )


@router.message(Form.method)
async def direction(message: Message, state: FSMContext):
    if message.text == "–ì–æ—Ç—ñ–≤–∫–∞" or message.text == "–ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫":
        await state.update_data(method=message.text)
        await state.set_state(Form.city)
        await message.answer(f"–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞")
    else:
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É")


@router.message(Form.city)
async def direction(message: Message, state: FSMContext):
    if message.text.isalpha():
        await state.update_data(city=message.text)
        await state.set_state(Form.recipient)
        await message.answer(f"–í–≤–µ–¥—ñ—Ç—å –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ —Ç–∏–ø—É <b>@username</b>")
    else:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ, –∞ –Ω–µ —Ü–∏—Ñ—Ä–∏/—Ü–∏—Ñ—Ä—É")


@router.message(Form.recipient)
async def direction(message: Message, state: FSMContext):
    if message.text.startswith("@"):
        data = await state.update_data(recipient=message.text)
        kb = [
            [types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É ü§ù")]
        ]
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True
        )

        await message.answer(f"–ó–∞—è–≤–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞", reply_markup=keyboard)
        await show_summary(message=message, data=data)
    else:
        await message.answer("–í–∏ –≤–≤–µ–ª–∏ –Ω–µ <b>@username</b>")


async def show_summary(message: Message, data: Dict[str, Any]):
    cursor.execute("SELECT id FROM money")
    _ = cursor.fetchall()  # –û—á–∏—â–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∑–∞–ø–∏—Ç—É

    cursor.execute("SELECT MAX(id) FROM money")
    result = cursor.fetchone()
    if result and result[0]:
        id_str = result[0] + 1
    else:
        id_str = 1

    id = str(id_str).zfill(4)  # –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–¥–Ω—ñ –Ω—É–ª—ñ –¥–æ id
    # print("id ", id)
    direction = data["direction"]
    sum = data["sum"]
    currency = data["currency"]
    info = data["info"]
    method = data["method"]
    city = data["city"]
    recipient = data["recipient"]
    date = datetime.now(pytz.timezone('Europe/Kiev'))
    text = f'<b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏</b> - {id}\n' \
           f'<b>–ù–æ–º–µ—Ä –Ω–∞–ø—Ä—è–º–∫—É</b> - {direction}\n' \
           f'<b>–°—É–º–∞</b> - {sum}\n' \
           f'<b>–í–∞–ª—é—Ç–∞</b> - {currency}\n' \
           f'<b>–û–ø–∏—Å</b> - {info}\n' \
           f'<b>–û—Ç—Ä–∏–º—É–≤–∞—á</b> - {recipient}'

    # insert_info = "INSERT INTO money (id, direction, sum, currency, info, method, city, recipient, date)" \
    #               "VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)"
    # value = (id_str, direction, sum, currency, info, method, city, recipient, date)
    # cursor.execute(insert_info, value)
    # base.commit()

    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text=f"–ü–æ–≥–æ–¥–∏—Ç–∏ –∑–∞—è–≤–∫—É ‚úÖ", callback_data=f"1")
    )

    await bot.send_message(confirmation_id, text=text, reply_markup=builder.as_markup())

    # await message.answer(text=text, reply_markup=ReplyKeyboardRemove())


async def add_to_db(data: Dict[str, Any]):
    cursor.execute("SELECT id FROM money")
    _ = cursor.fetchall()
    cursor.execute("SELECT MAX(id) FROM money")
    result = cursor.fetchone()
    if result and result[0]:
        id_str = result[0] + 1
    else:
        id_str = 1
    id = str(id_str).zfill(4)
    # print("id ", id)
    direction = data["direction"]
    sum = data["sum"]
    currency = data["currency"]
    info = data["info"]
    method = data["method"]
    city = data["city"]
    recipient = data["recipient"]
    date = datetime.now(pytz.timezone('Europe/Kiev'))
    insert_info = "INSERT INTO money (id, direction, sum, currency, info, method, city, recipient, date)" \
                  "VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)"
    value = (id_str, direction, sum, currency, info, method, city, recipient, date)
    cursor.execute(insert_info, value)
    base.commit()


@router.callback_query((Text(startswith="1")))
async def callback(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    cursor = base.cursor(buffered=True)
    cursor.execute(
        'SELECT id, direction, sum, currency, info,  method, city, recipient, date FROM money ORDER BY id DESC LIMIT 1')
    r = cursor.fetchone()
    # print(r)

    await bot.send_message(send_to_id, f"<b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏</b> - {r[0]}\n"
                                       f"<b>–ù–æ–º–µ—Ä –Ω–∞–ø—Ä—è–º–∫—É</b> - {r[1]}\n"
                                       f"<b>–°—É–º–∞</b> - {r[2]}\n"
                                       f"<b>–í–∞–ª—é—Ç–∞</b> - {r[3]}\n"
                                       f"<b>–û–ø–∏—Å</b> - {r[4]}\n"
                                       f"<b>–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏</b> - {r[5]}\n"
                                       f"<b>–ú—ñ—Å—Ç–æ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞</b> - {r[6]}\n"
                                       f"<b>–û—Ç—Ä–∏–º—É–≤–∞—á</b> - {r[7]}\n"
                                       f"<b>–°—Ç–∞—Ç—É—Å</b> - –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω–æ‚úÖ @{callback_query.from_user.username}")
    await add_to_db()


# @router.message()
# async def echo_handler(message: types.Message) -> None:
#     await message.send_copy(chat_id=message.chat.id)


async def main() -> None:
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    print("Bot was started successfully")
    asyncio.run(main())
